buildscript {
	repositories {
		jcenter()
	}
}

plugins {
	id 'com.github.spotbugs' version '1.6.1'
}

apply plugin: 'java'

repositories {
	jcenter()
	mavenCentral()
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
	}
	test {
		java {
			srcDirs 'src/test/java'
		}
	}
	demo {
		java {
			srcDirs 'src/demo/java'
		}
		compileClasspath += sourceSets.main.runtimeClasspath
		runtimeClasspath += sourceSets.main.runtimeClasspath
	}
}

group = 'org.dockfx'
version = '0.3-SNAPSHOT'

description = "DockFX"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

apply plugin: 'checkstyle'
configurations {
	checkstyleConfig
}
def versions = [
		checkstyle: '8.8',
]

dependencies {
	checkstyleConfig("com.puppycrawl.tools:checkstyle:${versions.checkstyle}") {
		transitive = false
	}
	checkstyle "com.puppycrawl.tools:checkstyle:${versions.checkstyle}"
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

checkstyle {
	configFile = rootProject.file('google_checks.xml')
	showViolations true
	sourceSets = [project.sourceSets.main]
}

tasks.withType(Checkstyle).each { checkstyleTask ->
	checkstyleTask.doLast {
		reports.all { report ->
			if (report.name == "xml") {
				def outputFile = report.destination
				if (outputFile.exists() && outputFile.text.contains("<error ")) {
					//throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
					println "There were checkstyle warnings! For more info check $outputFile"
				}
			}
		}
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.6'
	distributionUrl = "https://services.gradle.org/distributions/" +
			"gradle-${gradleVersion}-all.zip"
}

task('versions') {
	group 'help'
	description 'Prints tool versions and useful environment variables.'
	doLast {
		println "JAVA_OPTS:      ${System.env.JAVA_OPTS ?: "[]"}"
		println "JAVA_HOME:      ${System.env.JAVA_HOME}"
		println "Java version:   ${System.env.JAVA_VERSION}"
		println "Gradle version: ${gradle.gradleVersion}"
	}
}

task('sourceJar',type: Jar) {
	group 'Build'
	description 'Assembles a JAR containing the source code.'
	classifier 'sources'
	from sourceSets.main.allJava
}

task('javadocJar',type: Jar) {
	group 'Build'
	description 'Assembles a JAR containing the Javadoc.'
	classifier 'javadoc'
	from javadoc
}

jar.finalizedBy('sourceJar')
jar.finalizedBy('javadocJar')
